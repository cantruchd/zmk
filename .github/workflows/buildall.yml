name: Build All

on:
  workflow_dispatch:  # Chỉ chạy khi bấm nút manual

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: {}

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: docker.io/zmkfirmware/zmk-build-arm:3.5
    needs: get-all-hardware
    strategy:
      matrix:
        include: ${{ fromJSON(needs.get-all-hardware.outputs.build-matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Cache west modules
        uses: actions/cache@v4
        env:
          cache-name: cache-zephyr-modules
        with:
          path: |
            modules/
            tools/
            zephyr/
            bootloader/
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('app/west.yml') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
        timeout-minutes: 2
        continue-on-error: true

      - name: Initialize workspace (west init)
        run: west init -l app

      - name: Update modules (west update)
        run: west update --fetch-opt=--filter=tree:0

      - name: Export Zephyr CMake package (west zephyr-export)
        run: west zephyr-export

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "14.x"

      - name: Install @actions/artifact
        run: npm install @actions/artifact

      - name: Build
        uses: actions/github-script@v7
        id: boards-list
        with:
          script: |
            const fs = require('fs');
            const execSync = require('child_process').execSync;

            const buildShieldArgs = JSON.parse(`${{ matrix.shieldArgs }}`);

            let error = false;

            for (const shieldArgs of buildShieldArgs) {
              try {
                console.log(`::group::${{ matrix.board}} ${shieldArgs.shield} Build`)

                const output = execSync(`west build -s app -p -b ${{ matrix.board }} ${shieldArgs.snippet ? '-S ' + shieldArgs.snippet : ''} -- ${shieldArgs.shield ? '-DSHIELD="' + shieldArgs.shield + '"' : ''} ${shieldArgs['cmake-args'] || ''}`);

                console.log(output.toString());
              } catch (e) {
                console.error(`::error::Failed to build ${{ matrix.board }} ${shieldArgs.shield} ${shieldArgs['cmake-args']}`);
                console.error(e);
                error = true;
              } finally {
                console.log('::endgroup::');
              }
            }

            if (error) {
              throw new Error('Failed to build one or more configurations');
            }

      - name: Upload artifacts
        uses: actions/github-script@v7
        continue-on-error: true
        id: boards-upload
        with:
          script: |
            const fs = require('fs');
            const {default: artifact} = require('@actions/artifact');

            const buildShieldArgs = JSON.parse(`${{ matrix.shieldArgs }}`);

            let error = false;

            for (const shieldArgs of buildShieldArgs) {
              try {
                console.log(`::group::${{ matrix.board}} ${shieldArgs.shield} Upload`)

                const fileExtensions = ["hex", "uf2"];

                const files = fileExtensions
                  .map(extension => "build/zephyr/zmk." + extension)
                  .filter(path => fs.existsSync(path));

                const rootDirectory = 'build/zephyr';
                const options = {
                    continueOnError: true
                }

                const cmakeName = shieldArgs['cmake-args'] ? '-' + (shieldArgs.nickname || shieldArgs['cmake-args'].split(' ').join('')) : '';
                const artifactName = `${{ matrix.board }}${shieldArgs.shield ? '-' + shieldArgs.shield : ''}${cmakeName}-zmk`;

                await artifact.uploadArtifact(artifactName, files, rootDirectory, options);
              } catch (e) {
                console.error(`::error::Failed to upload ${{ matrix.board }} ${shieldArgs.shield} ${shieldArgs['cmake-args']}`);
                console.error(e);
                error = true;
              } finally {
                console.log('::endgroup::');
              }
            }

            if (error) {
              throw new Error('Failed to build one or more configurations');
            }

  get-all-hardware:
    runs-on: ubuntu-latest
    outputs:
      build-matrix: ${{ steps.create-matrix.outputs.result }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "14.x"

      - name: Install js-yaml
        run: npm install js-yaml

      - name: Aggregate Metadata
        uses: actions/github-script@v7
        id: aggregate-metadata
        with:
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');

            const globber = await glob.create("app/boards/**/*.zmk.yml");
            const files = await globber.glob();

            const aggregated = files.flatMap((f) =>
              yaml.loadAll(fs.readFileSync(f, "utf8"))
            );

            return JSON.stringify(aggregated).replace(/\\/g,"\\\\").replace(/`/g,"\\`");
          result-encoding: string

      - name: Create Build Matrix
        uses: actions/github-script@v7
        id: create-matrix
        with:
          script: |
            const hardware = JSON.parse(`${{ steps.aggregate-metadata.outputs.result }}`);

            // Organize hardware by type
            const grouped = hardware.reduce((agg, hm) => {
              switch (hm.type) {
                case "board":
                  if (hm.features && hm.features.includes("keys")) {
                    agg.onboard.push(hm);
                  } else if (hm.exposes) {
                    hm.exposes.forEach((element) => {
                      let ic = agg.interconnects[element] || {
                        boards: [],
                        shields: [],
                      };
                      ic.boards.push(hm);
                      agg.interconnects[element] = ic;
                    });
                  }
                  break;
                case "shield":
                  if (hm.features && hm.features.includes("keys")) {
                    hm.requires.forEach((id) => {
                      let ic = agg.interconnects[id] || { boards: [], shields: [] };
                      ic.shields.push(hm);
                      agg.interconnects[id] = ic;
                    });
                  }
                  break;
                case "interconnect":
                  let ic = agg.interconnects[hm.id] || { boards: [], shields: [] };
                  ic.interconnect = hm;
                  agg.interconnects[hm.id] = ic;
                  break;
              }
              return agg;
            }, { onboard: [], interconnects: {} });

            // Build list of all configurations
            let includeOnboard = grouped.onboard.flatMap(b => {
              if (b.siblings) {
                return b.siblings.map(board => ({
                  board,
                }));
              } else {
                return {
                  board: b.id,
                };
              }
            });

            let includeInterconnect = Object.values(grouped.interconnects).flatMap(i =>
              i.boards.flatMap(b =>
                i.shields.flatMap(s => {
                  if (s.siblings) {
                    return s.siblings.map(shield => ({
                      board: b.id,
                      shield,
                    }));
                  } else {
                    return {
                      board: b.id,
                      shield: s.id,
                    };
                  }
                })
              )
            );

            const allConfigs = [...includeOnboard, ...includeInterconnect];

            // Group by board
            const perBoard = {};
            for (const configuration of allConfigs) {
              if (!perBoard[configuration.board])
                perBoard[configuration.board] = [];

              perBoard[configuration.board].push({
                shield: configuration.shield,
                'cmake-args': configuration['cmake-args'],
                snippet: configuration.snippet,
                nickname: configuration.nickname
              })
            }

            return Object.entries(perBoard).map(([board, shieldArgs]) => ({
              board,
              shieldArgs: JSON.stringify(shieldArgs),
            }));
